Харківський університет радіоелектроніки Факультет комп'ютерних наук 
Кафедра програмної інженерії





ЗВІТ
до практичної роботи №1 з дисципліни «Архітектура програмного забезпечення»
на тему: «Шаблон (патерн) проєктування ПЗ Observer» 







Виконав ст. гр ПЗПІ-22-2 Верясов Владислав Олексійович

Перевірив
Доцент кафедри ПІ Лещинський Володимир Олександрович 







Харків 2025

МЕТА


Метою даної роботи є ознайомлення з шаблоном (патерном) проєктування програмного забезпечення Observer (Спостерігач), який належить до поведінкових патернів. Цей патерн дозволяє реалізувати механізм підписки на події, що забезпечує слабке зчеплення між об'єктами та сприяє кращій масштабованості системи.
Особлива увага приділяється розумінню принципів роботи Observer-патерна та його реалізації на практиці, зокрема на прикладі подій у мові програмування JavaScript. Завдяки цьому патерну можна створювати гнучкі архітектури, де зміна стану одного об’єкта автоматично викликає відповідні дії в інших об’єктах, без прямого зв’язку між ними.

ЗАВДАННЯ


Завданням практичної роботи є - дослідити роботу та структуру патерна Observer.

ХІД РОБОТИ


Observer — це патерн, у якому об'єкт (Subject) має список інших об'єктів (Observers), які "спостерігають" за ним. При зміні стану об'єкта він автоматично сповіщає всіх своїх спостерігачів.
У JavaScript патерн Observer часто реалізується за допомогою подій (addEventListener), де DOM-елементи виступають як джерела подій (Subject), а функції-обробники — як Observers.

ВИСНОВКИ


У процесі виконання роботи було розглянуто один із найбільш вживаних поведінкових шаблонів проєктування — Observer. Було проаналізовано його структуру, переваги та практичне застосування.
Патерн Observer дозволяє ефективно розділити логіку генерації подій та реакції на них, що робить архітектуру програмного забезпечення більш модульною, масштабованою та зручною для супроводу.
У результаті виконання практичного завдання було створено власну реалізацію Observer на JavaScript, а також розглянуто приклад його використання у вбудованому API браузера. Це демонструє універсальність та важливість патерна для сучасної розробки.