 Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії 





Лабораторна робота №3
з дисципліни: «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ» 







Виконав 
студент групи ПЗПІ-22-2 
Верясов Владислав Олексійович
28 травня 2025 р.
Перевірив
Старший викладач кафедри ПІ
Сокорчук Ігор Петрович 





Харків 2025
1 ІСТОРІЯ ЗМІН


№	Дата	Версія звіту	Опис змін та виправлень
1	28.05.2025	0.1	Створено усі розділи


2 ЗАВДАННЯ


Метою роботи є розробити клієнтську / front-end частину програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ


Назва: «Система для підтримки та регуляції прокату електротранспорту».
Назва англійською мовою: «Electric Transport Rental Management System».
Власна назва: «E-Transport».
У процесі виконання проєкту було розроблено комплексну систему для організації, аналітики та управління парком електросамокатів. Система складається з двох основних частин: мобільного застосунку для користувачів і адміністративної панелі для операторів. Уся інфраструктура взаємодіє із серверною частиною, що забезпечує зберігання, обробку даних та бізнес-логіку.
Мобільний застосунок було реалізовано за допомогою Flutter, що забезпечило кросплатформенність і високу швидкість розробки. Інтеграція з картографічною системою Mapbox дала змогу відображати в реальному часі місцезнаходження самокатів, зони прокату, геозони (дозволені, заборонені для паркування, бонусні) та маршрути руху. Було реалізовано функціонал реєстрації, авторизації та верифікації користувачів. Для оренди самокатів інтегровано платіжну систему PayPal. Також користувачі мають змогу переглядати історію поїздок, стан рахунку та накопичені бонуси.
Адміністративну панель розроблено з використанням ReactJS та фреймворку Bootstrap, що забезпечило зручний, адаптивний інтерфейс і динамічну взаємодію з сервером. Панель дозволяє моніторити парк самокатів у реальному часі, переглядати аналітику за поїздками та зонами, керувати геозонами (додавати, редагувати зони заборони паркування або руху), а також працювати зі звітами про несправності та історією обслуговування техніки. Додатково реалізовано управління верифікацією користувачів.

4 ВИСНОВКИ


             У результаті виконаної роботи було розроблено повнофункціональну систему для управління парком електросамокатів, що включає кросплатформений мобільний застосунок на  Flutter для користувачів, адміністративну панель для операторів  React, серверну частину на базі NestJS та Prisma, а також інтегровану платіжну систему PayPal і Mapbox для навігації. Уся система успішно розгорнута в Docker-середовищі, що забезпечує її стабільну роботу, масштабованість та зручність в обслуговуванні.



 
ДОДАТОК А 
Відеозапис


Відеозапис презентації результатів лабораторної роботи: https://youtu.be/Pg0JZRWXuoc
Хронологічний опис роботи: 
00:00 - початок 
00:18 – отримання усіх оренд
00:30 – оренда транспорту
01:18 – перевірка статусу оренди
01:35 – завершення оренди
03:03 – середня тривалість оренди
03:16 – активніть по годинам
03:37 – активніть по дням
04:16 – часи простою траспорта
05:02 – популярні зони початку оренди
05:48 – популярні зони завершення оренди
06:06 – прибуток з зони
06:44 – інформація та статистика щодо транспортного засобу
07:14 – дохід з транспортного засобу
07:30 – усі вільні самокати
07:47 – середній час використання самокату 
08:03 – кількість оренд на самокат
09:02 – пройдена дистанція самоката
09:07 – найближчі самокати до користувача
09:50 – середня кількість поїздок на одиниці транспорту
10:15 – використана енергія батареєю
10:42 – ефективність викиростання батареї
11:07 – інщі функції системи( логін, розподілення ролей, шифрування)
 

ДОДАТОК Б
Графічні матеріали


 
Рисунок Б.1 — ER-діаграма даних (нотація Чена) 
Рисунок Б.2 — Структура бази даних

   
Рисунок Б.3 — UML-діаграма прецедентів


 
Рисунок Б.4 — UML-діаграма компонентів
 
Рисунок Б.5 – UML діаграма діяльності ( оренда самоката)

 
Рисунок Б.6 – UML діаграма станів (оренда самоката)

 

ДОДАТОК В
Фрагменти коду серверу

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureVeriasovVladyslav/apz-pzpi-22-2-veriasov-vladyslav/blob/main/Lab3/apz-pzpi-22-2-veriasov-vladyslav-lab3/apz-pzpi-22-2-veriasov-vladyslav-lab3-code-web/my-react-router-app
Лістинг 1 – Функції що отримують з серверу елементами математичної обробки інформації
/// -------- маркери самокатів --------
  Future<void> _drawScooterMarkers(List<Scooter> list) async {
    _scooterManager ??=
        await _map!.annotations.createPointAnnotationManager();

    await _scooterManager!.deleteAll();

    final icon = await _loadBytes('assets/images/scooter.png');
    for (final s in list) {
      await _scooterManager!.create(
        mapbox.PointAnnotationOptions(
          geometry: mapbox.Point(
              coordinates: mapbox.Position(s.lng, s.lat)),
          image: icon,
          iconSize: 0.12,
          // textField: s.battery != null ? '${s.battery}%' : null,
          textSize: 12,
          textOffset: [0.0, 1.5],
        ),
      );
    }
  }

  Future<Uint8List> _loadBytes(String path) async {
    final bytes = await rootBundle.load(path);
    return bytes.buffer.asUint8List();
  }

  /// -------- UI --------
  @override
  Widget build(BuildContext context) => Scaffold(
        body: mapbox.MapWidget(
          key: const ValueKey('map'),
          cameraOptions: mapbox.CameraOptions(
            center: mapbox.Point(
                coordinates: mapbox.Position(0.0, 0.0)), // стартова точка
            zoom: 1,
          ),
          onMapCreated: (controller) {
            _map = controller;
            _initLocationAndCamera();
            _fetchAndShowScooters();
          },
        ),
      );
}

 
Рисунок В.2 – Отримання координат та місцезнаходження


В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureVeriasovVladyslav/apz-pzpi-22-2-veriasov-vladyslav/blob/main/Lab3/apz-pzpi-22-2-veriasov-vladyslav-lab3/apz-pzpi-22-2-veriasov-vladyslav-lab3-code/lib/main.dart

Лістинг 2 – Прорисовка карти та інших сторінок
import { useEffect, useRef } from 'react';

import mapboxgl from 'mapbox-gl';
import { useLoaderData } from 'react-router';

mapboxgl.accessToken = import.meta.env.VITE_MAPBOX_TOKEN as string;

export const loader = async () => {
  try {
    const api = import.meta.env.VITE_API_URL ?? 'http://localhost:3000';
    const res = await fetch(`${api}/stats`);
    // console.log('stats fetch', res.data);
    if (!res.ok) throw new Error('stats fetch failed');
    return await res.json(); // { rides, scooters, revenue }
  } catch {
    // fallback, щоб додаток не ламався
    return { rides: 0, scooters: 0, revenue: 0 };
  }
};

type Stats = { rides: number; scooters: number; revenue: number };

export default function Home() {
  const { rides, scooters, revenue } = useLoaderData() as Stats;
  const mapRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!mapRef.current) return;
    const map = new mapboxgl.Map({
      container: mapRef.current,
      style: 'mapbox://styles/mapbox/streets-v12',
      center: [13.38, 54.09],
      zoom: 12,
    });

    const api = import.meta.env.VITE_API_URL ?? 'http://localhost:3000';
    fetch(`${api}/vehicle`)
      .then(r => r.json())
      .then((s: { lng: number; lat: number }[]) => {
        s.forEach(({ lng, lat }) => {
          new mapboxgl.Marker({ color: '#ff5722' })
            .setLngLat([lng, lat])
            .addTo(map);
        });
      })
      .catch(() => {});

    return () => map.remove();
  }, []);

  return (
    <div className="flex flex-col gap-6">
      <section className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <StatCard title="Active rides" value={rides.toString()} />
        <StatCard title="Scooters online" value={scooters.toString()} />
        <StatCard title="Revenue today" value={`€ ${revenue}`} />
      </section>
      <div className="h-[60vh] rounded-xl overflow-hidden shadow-md" ref={mapRef} />
    </div>
  );
}

function StatCard({ title, value }: { title: string; value: string }) {
  return (
    <div className="bg-white rounded-xl shadow p-4 flex flex-col items-center">
      <span className="text-lg text-gray-500">{title}</span>
      <span className="text-2xl font-bold mt-2">{value}</span>
    </div>
  );
}

  }
}


В.3 Резервне копіювання користувацьких даних
GitHub репозиторій:  https://github.com/NureVeriasovVladyslav/apz-pzpi-22-2-veriasov-vladyslav/blob/main/Lab2/apz-pzpi-22-2-veriasov-vladyslav-lab2/apz-pzpi-22-2-veriasov-vladyslav-lab2-code/backup/backup.sh
Лістинг 4 - Запуск сервісу автоматичного збереження бекапів бази даних
#!/bin/bash

# Змінні
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M")
BACKUP_FILE="/backups/e-transport-$TIMESTAMP.backup"

# Команда pg_dump
pg_dump -h postgres -U postgres -d e-transport -F c -f "$BACKUP_FILE"

# Вивід у лог
echo "Backup created at $BACKUP_FILE"


Лістинг 2 - Докерфайл
FROM postgres:15

RUN apt-get update && apt-get install -y cron

# Копіюємо скрипт та план
COPY backup.sh /usr/local/bin/backup.sh
COPY crontab /etc/cron.d/backup-cron

# Дозволи
RUN chmod +x /usr/local/bin/backup.sh \
    && chmod 0644 /etc/cron.d/backup-cron

# Додаємо cron job
RUN crontab /etc/cron.d/backup-cron

# Створюємо директорію для бекапів
VOLUME /backups
RUN mkdir -p /backups

# Запускаємо cron
CMD ["cron", "-f"]

